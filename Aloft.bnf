{
  parserClass="com.exopacket.aloft.language.AloftParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Aloft"
  psiImplClassSuffix="Impl"
  psiPackage="com.exopacket.aloft.psi"
  psiImplPackage="com.exopacket.aloft.psi.impl"

  elementTypeHolderClass="com.exopacket.aloft.psi.AloftTypes"
  elementTypeClass="com.exopacket.aloft.psi.AloftElementType"
  tokenTypeClass="com.exopacket.aloft.psi.AloftTokenType"

}

root_unit ::= syntax*
syntax ::= OPT_WHITESPACE? BUILTIN_KEYWORDS OPT_WHITESPACE?
BUILTIN_KEYWORDS ::=  FUNCTIONS | CLASS_DECLARATION | SOURCE_DECLARATION | COMPONENT_DECLARATION | ELEMENT_DECLARATION | MODEL_DECLARATION | THEME_DECLARATION | CALLABLE_DECLARATION | PAGE_DECLARATION | ANIMATION_DECLARATION | MODULE_DECLARATION | QUERY_DECLARATION | VARIABLE_DECLARATION | COMMENT_BLOCK_DECLARATION
CLASS_DECLARATION ::= CLASS_KEYWORD NAMED OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END
CLASS_KEYWORD ::= "regexp:(?i:class)"
COMPONENT_DECLARATION ::= COMPONENT_KEYWORD NAMED OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END
COMPONENT_KEYWORD ::= "regexp:(?i:component)"
ELEMENT_DECLARATION ::= ELEMENT_KEYWORD NAMED OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END
ELEMENT_KEYWORD ::= "regexp:(?i:element)"
THEME_DECLARATION ::= THEME_KEYWORD NAMED OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END
THEME_KEYWORD ::= "regexp:(?i:theme)"
MODEL_DECLARATION ::= MODEL_KEYWORD NAMED OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END
MODEL_KEYWORD ::= "regexp:(?i:model)"
PAGE_DECLARATION ::= PAGE_KEYWORD PATH_STRING OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END
PAGE_KEYWORD ::= "regexp:(?i:page)"
ANIMATION_DECLARATION ::= ANIMATION_KEYWORD NAMED OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END
ANIMATION_KEYWORD ::= "regexp:(?i:animation)"
MODULE_DECLARATION ::= MODULE_KEYWORD NAMED OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END
MODULE_KEYWORD ::= "regexp:(?i:module)"
QUERY_DECLARATION ::= QUERY_KEYWORD NAMED_WITH_PARAMS OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END
QUERY_KEYWORD ::= "regexp:(?i:query)"
SOURCE_DECLARATION ::= SOURCE_KEYWORD PATH_STRING OPT_WHITESPACE? STATEMENT_END
SOURCE_KEYWORD ::= "regexp:(?i:source)"
CALLABLE_DECLARATION ::= CALLABLE_KEYWORD PATH_STRING OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END
CALLABLE_KEYWORD ::= "regexp:(?i:callable)"
VARIABLE_DECLARATION ::= VARIABLE VARIABLE_OPTIONS? (SEPARATOR EXPRESSION)? STATEMENT_END
VARIABLE ::= ("::"? ((NAMED_PARENTHESIS | NAMED_VAR) ","?))
VARIABLE_OPTIONS ::= VAR_TYPES | VAR_OPTIONS | VAR_TYPES VAR_OPTIONS
VAR_OPTIONS ::= "get" | "set" | "none"
FUNCTIONS ::= (FUNCTION_TYPES "[]"? | NAMED_CLASS_ARRAY) FUNCTION NAMED_WITH_PARAMS CURLY_BLOCK STATEMENT_END
FUNCTION ::= ("::"? (NAMED_PARENTHESIS_FUNCTIONS | NAMED))
FUNCTION_TYPES::= TYPES | "regexp:(?i:update)"
VAR_TYPES ::= TYPES | "regexp:(?i:function)" | "regexp:((?i:time)(\([\"'])([^\"'])*([\"']\))?)" | NAMED
TYPES ::=  "regexp:(?i:string)" | "regexp:(?i:integer)" | "regexp:(?i:int)" | "regexp:(?i:decimal)" | "regexp:(?i:bool)" | "regexp:(?i:boolean)" | "regexp:(?i:dynamic)"
CURLY_BLOCK ::= ("regexp:\{(\s+)?") (syntax | ((((NUMBERS | QUOTED_STRING | NAMED_VAR | NULL_VALUE | CURLY_OBJECT_BLOCK | BRACES_ARRAY_BLOCK) (","))*)? (NUMBERS | QUOTED_STRING | NAMED_VAR | NULL_VALUE | BRACES_ARRAY_BLOCK)))* ("regexp:(\s+)?\}")
EXPRESSION ::= (NULL_VALUE | BRACES_ARRAY_BLOCK | NAMED_VAR | QUOTED_STRING | NUMBERS | "." | "==" | "*" | "+" | "-" | "/" | "%" | "<" | ">" | "<=" | ">=" | "===" | "+=" | "-=" | "/=" | "*=" | "%=" | "(" | ")" | " ")+
BRACES_ARRAY_BLOCK ::= ("regexp:\[(\s+)?") (((NUMBERS | QUOTED_STRING | NAMED_VAR | NULL_VALUE | CURLY_OBJECT_BLOCK | BRACES_ARRAY_BLOCK) (","))*)? (NUMBERS | QUOTED_STRING | NAMED_VAR | NULL_VALUE | BRACES_ARRAY_BLOCK)? ("regexp:(\s+)?\]")
CURLY_OBJECT_BLOCK ::= ("regexp:\{(\s+)?") (((NUMBERS | QUOTED_STRING | NAMED_VAR | NULL_VALUE | CURLY_OBJECT_BLOCK | BRACES_ARRAY_BLOCK) (","))*)? (NUMBERS | QUOTED_STRING | NAMED_VAR | NULL_VALUE | BRACES_ARRAY_BLOCK)? ("regexp:(\s+)?\}")
NUMBERS ::= "regexp:\d+"
NULL_VALUE ::= "regexp:(?i:null)"
PATH_STRING ::=  QUOTED_STRING | ("/" | "\\" | NAMED_NUM_START | NAMED | "regexp:(\d+)" | "_" | "." | "-")*
QUOTED_STRING ::= "regexp:([\"'])([^\"'])*([\"'])"
NAMED_WITH_PARAMS ::= (NAMED_WITH_PARAMS_SPECIAL | NAMED_WITH_PARAMS_VAR) | EMPTY_PARENTHESIS
NAMED_WITH_PARAMS_SPECIAL ::= ("(" (NAMED ","?)+ "..."? ")")
NAMED_WITH_PARAMS_VAR ::= ("(" (NAMED_VAR ","?)+ "..."? ")")
EMPTY_PARENTHESIS ::= "(" ")"
NAMED_PARENTHESIS ::= NAMED_PARENTHESIS_SPECIAL | NAMED_PARENTHESIS_VAR
NAMED_PARENTHESIS_SPECIAL ::= "(" (NAMED ","?)+ ")"
NAMED_PARENTHESIS_FUNCTIONS ::= "(" NAMED ")"
NAMED_PARENTHESIS_VAR ::= "(" (NAMED_VAR ","?)+ ")"
NAMED_VAR ::= NAMED | NAMED_OBJECT_ARRAY | NAMED_ARRAY | NAMED_OBJECT
NAMED ::= ("regexp:(([a-zA-Z_](([a-zA-Z0-9_-]+))+)?[a-zA-Z_0-9]?)")
NAMED_CLASS_ARRAY ::= ("regexp:(([a-zA-Z_](([a-zA-Z0-9_-]+))+)?[a-zA-Z_0-9]?)(\[\])?")
NAMED_OBJECT ::= ("regexp:((([a-zA-Z_](([a-zA-Z0-9_-]+)?)+)([a-zA-Z_0-9])?))(\-\>)")
NAMED_OBJECT_ARRAY ::= ("regexp:((([a-zA-Z_](([a-zA-Z0-9_-]+)?)+)([a-zA-Z_0-9])?))(\[(\d+)\]\-\>)")
NAMED_ARRAY ::= ("regexp:((([a-zA-Z_](([a-zA-Z0-9_-]+)?)+)([a-zA-Z_0-9])?))(\[(\d+)\])")
NAMED_NUM_START ::= ("regexp:([a-zA-Z_0-9])((([a-zA-Z0-9_-]+)?)+)[a-zA-Z_0-9]?")
STATEMENT_END ::= ";" | CRLF
SEPARATOR ::= "regexp:((\\ )+)?\=((\\ )+)?"
OPT_WHITESPACE ::= "regexp:[\\ \n\t\r\f]+"
COMMENT_BLOCK_DECLARATION ::= "/*" "regexp:[^/\*]*(\*/)"
CRLF ::= ('\r\n'*)?

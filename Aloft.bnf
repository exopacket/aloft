{
  parserClass="com.exopacket.aloft.language.AloftParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Aloft"
  psiImplClassSuffix="Impl"
  psiPackage="com.exopacket.aloft.psi"
  psiImplPackage="com.exopacket.aloft.psi.impl"

  elementTypeHolderClass="com.exopacket.aloft.psi.AloftTypes"
  elementTypeClass="com.exopacket.aloft.psi.AloftElementType"
  tokenTypeClass="com.exopacket.aloft.psi.AloftTokenType"

}

root_unit ::= syntax*
syntax ::= OPT_WHITESPACE? BUILTIN_KEYWORDS OPT_WHITESPACE?
BUILTIN_KEYWORDS ::= CLASS_DECLARATION | SOURCE_DECLARATION | COMPONENT_DECLARATION | ELEMENT_DECLARATION | MODEL_DECLARATION | THEME_DECLARATION | CALLABLE_DECLARATION | PAGE_DECLARATION | ANIMATION_DECLARATION | MODULE_DECLARATION | QUERY_DECLARATION | VARIABLE_DECLARATION | COMMENT_BLOCK_DECLARATION
CLASS_DECLARATION ::= CLASS_KEYWORD NAMED OPT_WHITESPACE? BRACKETS_START STATEMENT_END
CLASS_KEYWORD ::= "regexp:(?i:class)"
COMPONENT_DECLARATION ::= COMPONENT_KEYWORD NAMED OPT_WHITESPACE? BRACKETS_START STATEMENT_END
COMPONENT_KEYWORD ::= "regexp:(?i:component)"
ELEMENT_DECLARATION ::= ELEMENT_KEYWORD NAMED OPT_WHITESPACE? BRACKETS_START STATEMENT_END
ELEMENT_KEYWORD ::= "regexp:(?i:element)"
THEME_DECLARATION ::= THEME_KEYWORD NAMED OPT_WHITESPACE? BRACKETS_START STATEMENT_END
THEME_KEYWORD ::= "regexp:(?i:theme)"
MODEL_DECLARATION ::= MODEL_KEYWORD NAMED OPT_WHITESPACE? BRACKETS_START STATEMENT_END
MODEL_KEYWORD ::= "regexp:(?i:model)"
PAGE_DECLARATION ::= PAGE_KEYWORD PATH_STRING OPT_WHITESPACE? BRACKETS_START STATEMENT_END
PAGE_KEYWORD ::= "regexp:(?i:page)"
ANIMATION_DECLARATION ::= ANIMATION_KEYWORD NAMED OPT_WHITESPACE? BRACKETS_START STATEMENT_END
ANIMATION_KEYWORD ::= "regexp:(?i:animation)"
MODULE_DECLARATION ::= MODULE_KEYWORD NAMED OPT_WHITESPACE? BRACKETS_START STATEMENT_END
MODULE_KEYWORD ::= "regexp:(?i:module)"
QUERY_DECLARATION ::= QUERY_KEYWORD NAMED_WITH_PARAMS OPT_WHITESPACE? BRACKETS_START STATEMENT_END
QUERY_KEYWORD ::= "regexp:(?i:query)"
SOURCE_DECLARATION ::= SOURCE_KEYWORD PATH_STRING OPT_WHITESPACE? STATEMENT_END
SOURCE_KEYWORD ::= "regexp:(?i:source)"
CALLABLE_DECLARATION ::= CALLABLE_KEYWORD PATH_STRING OPT_WHITESPACE? BRACKETS_START STATEMENT_END
CALLABLE_KEYWORD ::= "regexp:(?i:callable)"
VARIABLE_DECLARATION ::= VARIABLE VARIABLE_OPTIONS? (SEPARATOR (EXPRESSION | QUOTED_STRING))? STATEMENT_END
VARIABLE ::= ("::"? ((NAMED | NAMED_PARENTHESIS) ","?))
VARIABLE_OPTIONS ::= "string" | "get" | "set"
SEPARATOR ::= "="
PATH_STRING ::=  QUOTED_STRING | ("/" | "\\" | NAMED_NUM_START | NAMED | "_" | "." | "-")*
QUOTED_STRING ::= "regexp:([\"'])([^\"'])*([\"'])"
BRACKETS_START ::= "{"
NAMED_PARENTHESIS ::=  "(" (NAMED ","?)* ")"
NAMED_WITH_PARAMS ::= ("(" (NAMED ","?)* "..."? ")") | EMPTY_PARENTHESIS
EMPTY_PARENTHESIS ::= "(" ")"
NAMED ::= "regexp:([^0-9-'\"\\ \(]([a-zA-Z0-9_-])+)" | "regexp:([a-zA-Z])"
NAMED_NUM_START ::= "regexp:[^'\"-\\ ][a-zA-Z0-9_-]+"
EXPRESSION ::= (NAMED | NAMED_PARENTHESIS | "regexp:[\d\s]+" | "." | "==" | "+" | "-" | "/" | "%" | "<" | ">" | "<=" | ">=" | "===" | "+=" | "-=" | "/=" | "%=" | "(" | ")" | "null")+
STATEMENT_END ::= ";" | CRLF
OPT_WHITESPACE ::= "regexp:[\\ \n\t\r\f]+"
COMMENT_BLOCK_DECLARATION ::= "/*" "regexp:[^/\*]*(\*/)"
CRLF ::= ('\r\n'*)?
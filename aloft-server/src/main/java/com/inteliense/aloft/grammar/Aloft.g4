grammar Aloft;
syntax : OPT_WHITESPACE? BUILTIN_KEYWORDS OPT_WHITESPACE? ;
BUILTIN_KEYWORDS : SWITCH_BLOCK  | IF_DECLARATION | LOOP_DECLARATION | FUNCTIONS | QUERY_DECLARATION | CLASS_DECLARATION | CONSTRUCTOR_DECLARATION | SOURCE_DECLARATION | COMPONENT_DECLARATION | ELEMENT_DECLARATION | MODEL_DECLARATION | THEME_DECLARATION | CALLABLE_DECLARATION | PAGE_DECLARATION | ANIMATION_DECLARATION | MODULE_DECLARATION  | VARIABLE_DECLARATION | CONDITIONAL | COMMENT_BLOCK_DECLARATION ;
CLASS_DECLARATION : CLASS_KEYWORD NAMED OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END ;
CLASS_KEYWORD :  ('class') ;
COMPONENT_DECLARATION : COMPONENT_KEYWORD NAMED OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END ;
COMPONENT_KEYWORD :  ('component') ;
ELEMENT_DECLARATION : ELEMENT_KEYWORD NAMED OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END ;
ELEMENT_KEYWORD :  ('element') ;
THEME_DECLARATION : THEME_KEYWORD NAMED OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END ;
THEME_KEYWORD :  ('theme') ;
MODEL_DECLARATION : MODEL_KEYWORD NAMED OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END ;
MODEL_KEYWORD :  ('model') ;
PAGE_DECLARATION : PAGE_KEYWORD PATH_STRING OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END ;
PAGE_KEYWORD :  ('page') ;
ANIMATION_DECLARATION : ANIMATION_KEYWORD NAMED OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END ;
ANIMATION_KEYWORD :  ('animation') ;
MODULE_DECLARATION : MODULE_KEYWORD NAMED OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END ;
MODULE_KEYWORD :  ('module') ;
QUERY_DECLARATION : QUERY_KEYWORD NAMED? (NAMED_WITH_PARAMS_SPECIAL | EMPTY_PARENTHESIS) CURLY_BLOCK STATEMENT_END ;
QUERY_KEYWORD :  ('query') ;
SOURCE_DECLARATION : SOURCE_KEYWORD PATH_STRING OPT_WHITESPACE? STATEMENT_END ;
SOURCE_KEYWORD :  ('source') ;
CALLABLE_DECLARATION : CALLABLE_KEYWORD PATH_STRING OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END ;
CALLABLE_KEYWORD :  ('callable') ;
CONSTRUCTOR_DECLARATION : CONSTRUCTOR_KEYWORD OPT_WHITESPACE? CURLY_BLOCK STATEMENT_END ;
CONSTRUCTOR_KEYWORD :  ('create') ;
ISSET_KEYWORD :  ([!])?('isset') ;
IF_DECLARATION :  ('if') ([(]) ? EXPRESSION+ ([)])? CURLY_BLOCK (((( ('elseif') |  ('else if'))) ([(])? EXPRESSION+ ([)])? CURLY_BLOCK) | (('else') CURLY_BLOCK))* ;
LOOP_DECLARATION :  ('repeat')  ((( ('through') NAMED  ('as') NAMED) | ( ('until') ([(])? EXPRESSION+ ([)])? (('from') NUMBERS)?) | (('while') ([(])? EXPRESSION+ ([)])?))) CURLY_BLOCK ;
SWITCH_BLOCK :  ('switch') NAMED_PARENTHESIS_SWITCH SWITCH_CURLY_BLOCK ;
SWITCH_CURLY_BLOCK : ([{]([\s]+)) ((( ('case')(([\s]+)(([\d]+)|([\"'])([^\"'])*([\"'])|'null')[:]) | ( ('default')[:] ) | ('break')[;])* | ((syntax | (((GOTO_DECLARATION | PATH_STRING | IF_DECLARATION | LOOP_DECLARATION | NUMBERS | PROPERTY  | NAMED_VAR | NULL_VALUE | CURLY_OBJECT_BLOCK | BRACES_ARRAY_BLOCK) ([,]))*)? (PATH_STRING | NUMBERS | PROPERTY | NAMED_VAR | NULL_VALUE | BRACES_ARRAY_BLOCK)))* (([\s]+)[}]))) ;
VARIABLE_DECLARATION : VARIABLE VARIABLE_OPTIONS? (SEPARATOR EXPRESSION+)? STATEMENT_END ;
VARIABLE : ([\*])? (([:][:])? ((NAMED_PARENTHESIS | NAMED_VAR) ([,])?)) ;
VARIABLE_OPTIONS : VAR_TYPES | VAR_OPTIONS | VAR_TYPES VAR_OPTIONS ;
VAR_OPTIONS : 'get' | 'set' | 'none' ;
FUNCTIONS : (FUNCTION_TYPES [\[][\]]? | NAMED_CLASS_ARRAY)? FUNCTION NAMED_WITH_PARAMS CURLY_BLOCK STATEMENT_END ;
FUNCTION : (([:][:])? (NAMED_PARENTHESIS_FUNCTIONS | NAMED)) ;
FUNCTION_TYPES: TYPES |  ('update') | ('void') ;
VAR_TYPES : TYPES |  ('function') | (('time')(([(])[\"'])([^\"'])*([\"']([)]))?) | NAMED ;
TYPES :   ('string') |  ('integer') |  ('int') |  ('decimal') | ('bool') | ('boolean') | ('dynamic') ;
CURLY_BLOCK : ( ([{])([s]+)?) ( ('continue')[;] |  ('break')[;] | syntax | ((((GOTO_DECLARATION | IF_DECLARATION | LOOP_DECLARATION | NUMBERS | PROPERTY | PATH_STRING | NAMED_VAR | NULL_VALUE | CURLY_OBJECT_BLOCK | BRACES_ARRAY_BLOCK) ([,]))*)? (NUMBERS | PROPERTY | PATH_STRING | NAMED_VAR | NULL_VALUE | BRACES_ARRAY_BLOCK)))* (([s]+)?([}])) ;
NAMED_WITH_PARAMS : NAMED_WITH_PARAMS_SPECIAL | EMPTY_PARENTHESIS ;
NAMED_WITH_PARAMS_SPECIAL : ([(]) ((NAMED ((([,]) '...args')?)) | (((([,]) NAMED)+) ((([,])' ...args')?))) ([)]) ;
NAMED_WITH_PARAMS_VAR : (([(]) (NAMED_VAR ([,])?)+ ('...' NAMED) ([)])) ;
CONDITIONAL : EXPRESSION+ ([?]) EXPRESSION* ([:]) EXPRESSION* STATEMENT_END ;
EXPRESSION : ISSET_KEYWORD | SEPARATOR | NULL_VALUE | BRACES_ARRAY_BLOCK | (([!])? NAMED_VAR) | PATH_STRING | NUMBERS | ([.]) | ([&][&]) | ([|][|]) | ([=][=]) | ([\*]) | ([\+]) | ([\-]) | ([\\]) | ([%]) | ([<]) | ([>]) | ([<][=]) | ([>][=]) | ([=][=][=]) | ([\+][=]) | ([-][=]) | ([/][=]) | ([\*][=]) | ([%][=]) | ([(]) | ([(]) | ([\s]) ;
/* TODO: BELOW HAS ANTLR SYNTAX ERRORS */
BRACES_ARRAY_BLOCK : ( \[([s]+)?") (((NUMBERS | PATH_STRING | NAMED_VAR | NULL_VALUE | CURLY_OBJECT_BLOCK | BRACES_ARRAY_BLOCK) (([,])))*)? (NUMBERS | PATH_STRING | NAMED_VAR | NULL_VALUE | BRACES_ARRAY_BLOCK)? (([s]+)?\]) ;
CURLY_OBJECT_BLOCK : ( ([{])([s]+)?") (((NUMBERS | PROPERTY | PATH_STRING | NAMED_VAR | NULL_VALUE | CURLY_OBJECT_BLOCK | BRACES_ARRAY_BLOCK) (([,])))*)? (NUMBERS | PROPERTY | PATH_STRING | NAMED_VAR | NULL_VALUE | BRACES_ARRAY_BLOCK)? (([s]+)?([}])) ;
PROPERTY : NAMED_PROPERTY PROPERTY_VALUES STATEMENT_END ;
NAMED_PROPERTY : ( (([a-zA-Z_](([a-zA-Z0-9_-]+))+)?[a-zA-Z_0-9]?):) ;
NAMED_PROPERTY_OBJECT : NAMED ([(]) (((PROPERTY) (PROPERTY_VALUES)?) ([,])?)+ ") ;
PROPERTY_VALUES : NAMED_PROPERTY_OBJECT | NAMED_PROPERTY | HTML_ELEMENT | NAMED | NAMED_DOT | NAMED_VAR | NUMBERS | PATH_STRING | NULL_VALUE | BRACES_ARRAY_BLOCK ;
NUMBERS :  \d+ ;
HTML_ELEMENT :  #([a-zA-Z0-9_-]+) ;
NULL_VALUE :  (null) ;
EMPTY_PARENTHESIS : ([(]) ") ;
NAMED_PARENTHESIS : NAMED_PARENTHESIS_SPECIAL | NAMED_PARENTHESIS_VAR ;
NAMED_PARENTHESIS_SPECIAL : ([(]) (NAMED ([,])?)+ ") ;
NAMED_PARENTHESIS_FUNCTIONS : ([(]) NAMED ") ;
NAMED_PARENTHESIS_SWITCH : ([(]) NAMED_VAR ") ;
NAMED_PARENTHESIS_VAR : ([(]) (NAMED_VAR ([,])?)+ ") ;
NAMED_VAR : NAMED | NAMED_OBJECT_ARRAY | NAMED_ARRAY | NAMED_OBJECT ;
NAMED : ( (((\+\+)|(--))?)([a-zA-Z_])((([a-zA-Z0-9_-])*([a-zA-Z_0-9]))?)(((\+\+)|(--))?)) ;
NAMED_DOT : ( (((\+\+)|(--))?)([a-zA-Z_])((([a-zA-Z0-9_-]*)([a-zA-Z_0-9]))?)\.(((\+\+)|(--))?)([a-zA-Z_])((([a-zA-Z0-9_-]+)([a-zA-Z_0-9]))?))+ ;
NAMED_CLASS_ARRAY : ( ([a-zA-Z_])((([a-zA-Z0-9_-]*)([a-zA-Z_0-9]))?)(\[\])?) ;
NAMED_OBJECT : ( ([a-zA-Z_])((([a-zA-Z0-9_-]*)([a-zA-Z_0-9]))?)(\-\>)) ;
NAMED_OBJECT_ARRAY : ( (((\+\+)|(--))?)([a-zA-Z_])((([a-zA-Z0-9_-]*)([a-zA-Z_0-9]))?)(((\+\+)|(--))?)(\[(\d+)\]\-\>)) ;
NAMED_ARRAY : ( (((\+\+)|(--))?)([a-zA-Z_])((([a-zA-Z0-9_-]*)([a-zA-Z_0-9]))?)(\[(\d+)\])(((\+\+)|(--))?)) ;
GOTO_DECLARATION : GOTO_KEYWORD PATH_STRING STATEMENT_END ;
GOTO_KEYWORD :  (goto) ;
PATH_STRING :  QUOTED_STRING | (("^")?  [a-zA-Z\\/._0-9-]+) ;
QUOTED_STRING :  ([\"'])([^\"'])*([\"']) ;
STATEMENT_END : ";" | CRLF ;
SEPARATOR :  ((\\ )+)?\=((\\ )+)? ;
OPT_WHITESPACE :  [\\ \n\t\r\f]+ ;
COMMENT_BLOCK_DECLARATION : "/*"  [^/\*]*(\*/) ;
CRLF : ('\r\n'*)? ;